"use strict";
/*
 * @adonisjs/validator
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ErrorReporters = __importStar(require("../ErrorReporter"));
/**
 * Extends the request class by adding `validate` method
 * to it
 */
function extendRequest(Request, validate) {
    Request.macro('validate', async function validateRequest(Validator) {
        let Reporter;
        /**
         * Attempt to find the best error reporter for validation
         */
        if (this.ajax()) {
            Reporter = ErrorReporters.ApiErrorReporter;
        }
        else {
            switch (this.accepts(['html', 'application/vnd.api+json', 'json'])) {
                case 'html':
                case null:
                    Reporter = ErrorReporters.VanillaErrorReporter;
                    break;
                case 'json':
                    Reporter = ErrorReporters.ApiErrorReporter;
                    break;
                case 'application/vnd.api+json':
                    Reporter = ErrorReporters.JsonApiErrorReporter;
                    break;
            }
        }
        /**
         * Merging request body, files and the params. The params are nested, since
         * it's possible that request body and params may have the same object
         * properties.
         */
        const validatorNode = typeof Validator === 'function' ? new Validator(this.ctx) : Validator;
        const data = validatorNode.data || {
            ...this.all(),
            ...this.allFiles(),
            params: this.ctx.params,
        };
        /**
         * Creating a new profiler action to profile the validation
         */
        const profilerAction = this.ctx.profiler.profile('request:validate');
        try {
            const validated = await validate({ data, reporter: Reporter, ...validatorNode });
            profilerAction.end({ status: 'success' });
            return validated;
        }
        catch (error) {
            profilerAction.end({ status: 'error' });
            throw error;
        }
    });
}
exports.default = extendRequest;
