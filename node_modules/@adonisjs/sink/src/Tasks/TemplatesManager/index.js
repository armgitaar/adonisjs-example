"use strict";
/*
* @adonisjs/sink
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const colors_1 = require("@poppinss/colors");
const path_1 = require("path");
const logger_1 = require("../../logger");
const Mustache_1 = require("../../Files/Formats/Mustache");
const TemplateLiteral_1 = require("../../Files/Formats/TemplateLiteral");
/**
 * Templates manager to copy one or more templates to the user project.
 */
class TemplatesManager {
    constructor(projectRoot, templatesSourceDir, application) {
        this.projectRoot = projectRoot;
        this.templatesSourceDir = templatesSourceDir;
        this.application = application;
        this.colors = new colors_1.Colors();
        if (!path_1.isAbsolute(this.projectRoot)) {
            throw new Error('Templates manager needs an absolute path to the project root');
        }
        if (!path_1.isAbsolute(this.templatesSourceDir)) {
            throw new Error('Templates manager needs an absolute path to the templates source directory');
        }
    }
    /**
     * Normalizes the template node to it's object version
     */
    normalizeTemplateNode(template) {
        template = typeof (template) === 'string' ? {
            src: template,
            dest: template.replace(new RegExp(`${path_1.extname(template)}$`), ''),
            mustache: false,
            data: {},
        } : template;
        template.dest = path_1.extname(template.dest) === '' ? `${template.dest}.ts` : template.dest;
        return template;
    }
    /**
     * Returns directory for the template key. It is defined inside the adonisrc file.
     */
    getDirectoryFor(templateFor) {
        /**
         * Ensure the object key inside package.json file is a known directory
         */
        const configuredDirectory = this.application.directoriesMap.get(templateFor);
        if (!configuredDirectory) {
            logger_1.logger.error({
                message: `Unknown directory type ${this.colors.underline(templateFor)}`,
                icon: true,
            });
            return;
        }
        return configuredDirectory;
    }
    /**
     * Copies template for a given given pre-defined directory within the rc file.
     */
    copyTemplateFor(templateFor, template) {
        const configuredDirectory = this.getDirectoryFor(templateFor);
        if (!configuredDirectory) {
            return;
        }
        if (!template.src || !template.dest) {
            throw new Error('src and dest are required when copying templates');
        }
        const sourcePath = path_1.join(this.templatesSourceDir, template.src);
        const destinationPath = path_1.normalize(`${configuredDirectory}/${template.dest}`);
        const renderer = template.mustache
            ? new Mustache_1.MustacheFile(this.projectRoot, destinationPath, sourcePath)
            : new TemplateLiteral_1.TemplateLiteralFile(this.projectRoot, destinationPath, sourcePath);
        const hasFile = renderer.exists();
        renderer.apply(template.data);
        renderer.commit();
        if (hasFile) {
            logger_1.logger.skip(destinationPath);
        }
        else {
            logger_1.logger.create(destinationPath);
        }
    }
    /**
     * Copy one or more templates for a given pre-defined directory within the rc file.
     */
    copyTemplatesFor(templateFor, templates) {
        templates = Array.isArray(templates) ? templates : [templates];
        templates
            .map((template) => this.normalizeTemplateNode(template))
            .forEach((template) => this.copyTemplateFor(templateFor, template));
    }
    /**
     * Copy multiple templates to the destination. It takes the input of templates
     * defined inside the package.json file.
     */
    async copy(templates) {
        Object.keys(templates).forEach((templateFor) => {
            if (templateFor === 'basePath') {
                return;
            }
            this.copyTemplatesFor(templateFor, templates[templateFor]);
        });
    }
}
exports.TemplatesManager = TemplatesManager;
