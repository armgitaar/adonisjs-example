"use strict";
/*
 * @adonisjs/view
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const edge_js_1 = require("edge.js");
/**
 * View provider to register view to the application
 */
class ViewProvider {
    constructor(container) {
        this.container = container;
    }
    /**
     * Add globals for resolving routes
     */
    addRouteGlobal(View, Route) {
        /**
         * Adding `route` global
         */
        View.global('route', (routeIdentifier, options, domain) => {
            const url = Route.makeUrl(routeIdentifier, options, domain);
            /**
             * Raise error when unable to lookup view.
             */
            if (!url) {
                throw new Error(`Unable to lookup route "${routeIdentifier}"`);
            }
            return url;
        });
        /**
         * Adding `signedRoute` global
         */
        View.global('signedRoute', (routeIdentifier, options, domain) => {
            const url = Route.makeSignedUrl(routeIdentifier, options, domain);
            if (!url) {
                throw new Error(`Unable to lookup route "${routeIdentifier}"`);
            }
            return url;
        });
    }
    /**
     * Share application reference
     */
    addAppGlobal(View, Application) {
        View.global('app', Application);
    }
    /**
     * Registering the brisk route to render view directory
     * from the route.
     */
    registerBriskRoute(Route) {
        Route.BriskRoute.macro('render', function renderView(template, data) {
            this.setHandler(({ view }) => {
                return view.render(template, data);
            }, 'render');
            return this;
        });
    }
    /**
     * Registering the http context getter to access an isolated
     * view instance with the request and route.
     */
    registerHTTPContextGetter(HttpContext, View) {
        HttpContext.getter('view', function () {
            return View.share({ request: this.request, route: this.route });
        }, true);
    }
    /**
     * Register view binding
     */
    register() {
        this.container.singleton('Adonis/Core/View', () => {
            const Env = this.container.use('Adonis/Core/Env');
            const Application = this.container.use('Adonis/Core/Application');
            const edge = new edge_js_1.Edge({ cache: Env.get('CACHE_VIEWS') });
            edge.mount(Application.viewsPath());
            return edge;
        });
    }
    /**
     * Setup view on boot
     */
    boot() {
        this.container.with([
            'Adonis/Core/Route',
            'Adonis/Core/View',
            'Adonis/Core/HttpContext',
            'Adonis/Core/Application',
        ], (Route, View, HttpContext, Application) => {
            this.addRouteGlobal(View, Route);
            this.addAppGlobal(View, Application);
            Object.keys(edge_js_1.GLOBALS).forEach((key) => View.global(key, edge_js_1.GLOBALS[key]));
            this.registerBriskRoute(Route);
            this.registerHTTPContextGetter(HttpContext, View);
        });
    }
}
exports.default = ViewProvider;
