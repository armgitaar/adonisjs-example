"use strict";
/*
 * @adonisjs/redis
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Store = void 0;
/// <reference path="../../adonis-typings/index.ts" />
const utils_1 = require("@poppinss/utils");
/**
 * Session store to mutate and access values from the session object
 */
class Store {
    constructor(values) {
        this.values = values || {};
    }
    /**
     * Returns the store values
     */
    toJSON() {
        return this.values;
    }
    /**
     * Set key/value pair
     */
    set(key, value) {
        utils_1.lodash.set(this.values, key, value);
    }
    /**
     * Get all values
     */
    all() {
        return this.values;
    }
    /**
     * Get value for a given key
     */
    get(key, defaultValue) {
        return utils_1.lodash.get(this.values, key, defaultValue);
    }
    /**
     * Remove key
     */
    unset(key) {
        utils_1.lodash.unset(this.values, key);
    }
    /**
     * Reset store by clearing it's values.
     */
    clear() {
        this.values = {};
    }
    /**
     * Pull value from the store. It is same as calling
     * store.get and then store.unset
     */
    pull(key, defaultValue) {
        return ((value) => {
            this.unset(key);
            return value;
        })(this.get(key, defaultValue));
    }
    /**
     * Increment number. The method raises an error when
     * nderlying value is not a number
     */
    increment(key, steps = 1) {
        const value = this.get(key, 0);
        if (typeof value !== 'number') {
            throw new utils_1.Exception(`Cannot increment "${key}", since original value is not a number`);
        }
        this.set(key, value + steps);
    }
    /**
     * Increment number. The method raises an error when
     * nderlying value is not a number
     */
    decrement(key, steps = 1) {
        const value = this.get(key, 0);
        if (typeof value !== 'number') {
            throw new utils_1.Exception(`Cannot increment "${key}", since original value is not a number`);
        }
        this.set(key, value - steps);
    }
}
exports.Store = Store;
