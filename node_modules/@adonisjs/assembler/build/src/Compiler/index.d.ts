import tsStatic from 'typescript';
import { Logger } from '@poppinss/fancy-logs';
import { TypescriptCompiler } from '@poppinss/chokidar-ts';
import { RcFile } from '../RcFile';
import { Manifest } from '../Manifest';
import { HttpServer, DummyHttpServer } from '../HttpServer';
/**
 * Exposes the API to build the AdonisJs project for development or
 * production. The production build has it's own set of node_modules
 */
export declare class Compiler {
    appRoot: string;
    private serveApp;
    private nodeArgs;
    private logger;
    /**
     * Reference to typescript compiler
     */
    tsCompiler: TypescriptCompiler;
    /**
     * Reference to HTTP server
     */
    httpServer: HttpServer | DummyHttpServer;
    /**
     * Reference to rc File
     */
    rcFile: RcFile;
    /**
     * Manifest instance to generate ace manifest file
     */
    manifest: Manifest;
    /**
     * Same as [[this.writeRcFile]] but waits for 2secs
     */
    touchRcFile: any;
    /**
     * Returns relative unix path from the project root. Used for
     * display only
     */
    private getRelativeUnixPath;
    private colors;
    constructor(appRoot: string, serveApp: boolean, nodeArgs?: string[], logger?: Logger);
    /**
     * write .adonisrc.json file to the build directory
     */
    private writeRcFile;
    /**
     * Create the http server
     */
    createHttpServer(outDir: string): Promise<void>;
    /**
     * Render ts diagnostics
     */
    renderDiagnostics(diagnostics: tsStatic.Diagnostic[], host: tsStatic.CompilerHost): void;
    /**
     * Parses the tsconfig file
     */
    parseConfig(): undefined | tsStatic.ParsedCommandLine;
    /**
     * Cleans up the build directory
     */
    cleanupBuildDirectory(outDir: string): Promise<void>;
    /**
     * Copies .adonisrc.json file to the destination
     */
    copyAdonisRcFile(outDir: string): Promise<void>;
    /**
     * Copy all meta files to the build directory
     */
    copyMetaFiles(outDir: string, extraFiles?: string[]): Promise<void>;
    /**
     * Copy files to destination directory
     */
    copyFiles(files: string[], outDir: string): Promise<void>;
    /**
     * Build typescript source files
     */
    buildTypescriptSource(config: tsStatic.ParsedCommandLine): void;
    /**
     * Compile project. See [[Compiler.compileForProduction]] for
     * production build
     */
    compile(): Promise<boolean>;
    /**
     * Compile project. See [[Compiler.compile]] for development build
     */
    compileForProduction(client: 'npm' | 'yarn'): Promise<boolean>;
}
