"use strict";
/*
* @adonisjs/assembler
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ace_1 = require("@adonisjs/ace");
/**
 * Compile typescript project to Javascript and start
 * the HTTP server
 */
class Serve extends ace_1.BaseCommand {
    constructor() {
        super(...arguments);
        /**
         * Arguments to pass to the `node` binary
         */
        this.nodeArgs = [];
    }
    async handle() {
        const { Watcher } = await Promise.resolve().then(() => __importStar(require('../src/Watcher')));
        const { Compiler } = await Promise.resolve().then(() => __importStar(require('../src/Compiler')));
        const { BuildWatcher } = await Promise.resolve().then(() => __importStar(require('../src/BuildWatcher')));
        const { ADONIS_ACE_CWD, ADONIS_IS_TYPESCRIPT, ADONIS_BUILD_DIR } = await Promise.resolve().then(() => __importStar(require('../config/env')));
        const cwd = ADONIS_ACE_CWD();
        /**
         * Dis-allow when CWD is missing. It will always be set by `node ace`
         * commands
         */
        if (!cwd) {
            this.logger.error('Cannot build non-typescript project. Make sure to run "node ace serve" from the project root');
            return;
        }
        /**
         * Dis-allow when running the command inside the compiled source and still
         * asking to re-compile the code
         */
        if (!ADONIS_IS_TYPESCRIPT() && this.compile !== false) {
            this.logger.error([
                'Cannot build non-typescript project. ',
                'Make sure to run "node ace serve" from the project root, or use "--no-compile" flag',
            ].join(''));
            return;
        }
        try {
            if (this.compile === false) {
                await new BuildWatcher(cwd, this.nodeArgs, this.logger).watch(ADONIS_BUILD_DIR() || './', this.poll);
            }
            else if (this.watch) {
                await new Watcher(cwd, true, this.nodeArgs, this.logger).watch(this.poll);
            }
            else {
                await new Compiler(cwd, true, this.nodeArgs, this.logger).compile();
            }
        }
        catch (error) {
            this.logger.fatal(error);
        }
    }
}
Serve.commandName = 'serve';
Serve.description = 'Compile typescript code to Javascript and start the HTTP server';
__decorate([
    ace_1.flags.boolean({ description: 'Watch for file changes and re-build the project', alias: 'w' }),
    __metadata("design:type", Boolean)
], Serve.prototype, "watch", void 0);
__decorate([
    ace_1.flags.boolean({
        description: 'Detect file changes by polling files instead of listening to filesystem events',
        alias: 'p',
    }),
    __metadata("design:type", Boolean)
], Serve.prototype, "poll", void 0);
__decorate([
    ace_1.flags.boolean({
        description: 'Turn off Typescript compiler by passing --no-compile',
        default: true,
    }),
    __metadata("design:type", Boolean)
], Serve.prototype, "compile", void 0);
__decorate([
    ace_1.flags.array({ description: 'CLI options to pass to the node command line' }),
    __metadata("design:type", Array)
], Serve.prototype, "nodeArgs", void 0);
exports.default = Serve;
