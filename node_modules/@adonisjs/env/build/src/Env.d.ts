/// <reference path="../adonis-typings/env.d.ts" />
import { EnvContract } from '@ioc:Adonis/Core/Env';
/**
 * The ENV module enables the use of environment variables by parsing dotfiles syntax
 * and updates the `process.env` object in Node.js.
 *
 * AdonisJs automatically reads and passes the contents of `.env` file to this class.
 */
export declare class Env implements EnvContract {
    /**
     * Casts the string value to their native data type
     * counter parts. Only done for `booleans` and
     * `nulls`.
     */
    private castValue;
    /**
     * Returns value for a given key from the environment variables. Also
     * the current parsed object is used to pull the reference.
     */
    private getValue;
    /**
     * Interpolating the token wrapped inside the mustache
     * braces.
     */
    private interpolateMustache;
    /**
     * Interpolating the escaped sequence.
     */
    private interpolateEscapedSequence;
    /**
     * Interpolating the variable reference starting with a
     * `$`. We only capture numbers,letter and underscore.
     * For other characters, one can use the mustache
     * braces.
     */
    private interpolateVariable;
    /**
     * Interpolates the referenced values
     */
    private interpolate;
    /**
     * Parser environment variables by parsing a string
     * in `dotfile` syntax.
     *
     * @example
     * ```ts
     * Env.parse(`
     *  PORT=3000
     *  HOST=127.0.0.1
     * `)
     *
     * // Output
     * { PORT: '3000', HOST: '127.0.0.1' }
     * ```
     *
     */
    parse(envString: string): {};
    /**
     * Processes environment variables by parsing a string
     * in `dotfile` syntax.
     *
     * @example
     * ```ts
     * Env.process(`
     *  PORT=3000
     *  HOST=127.0.0.1
     * `)
     * ```
     *
     * and then access it as follows
     *
     * ```ts
     * Env.get('PORT')
     *
     * // or
     * process.env.PORT
     * ```
     */
    process(envString: string, overwrite?: boolean): void;
    /**
     * Get value for a key from the process.env. Since `process.env` object stores all
     * values as strings, this method will cast them to their counterpart datatypes.
     *
     * | Value | Casted value |
     * |------|---------------|
     * | 'true' | true |
     * | '1' | true |
     * | 'false' | false |
     * | '0' | false |
     * | 'null' | null |
     *
     * Everything else is returned as a string.
     *
     * A default value can also be defined which is returned when original value
     * is undefined.
     *
     * @example
     * ```ts
     * Env.get('PORT', 3333)
     * ```
     */
    get(key: string, defaultValue?: any): string | boolean | null | undefined;
    /**
     * The method is similar to it's counter part [[get]] method. However, it will
     * raise exception when the original value is non-existing.
     *
     * `undefined`, `null` and `empty strings` are considered as non-exisitng values.
     *
     * We recommended using this method for **environment variables** that are strongly
     * required to run the application stably.
     *
     * @example
     * ```ts
     * Env.getOrFail('PORT')
     * ```
     */
    getOrFail(key: string): string | boolean;
    /**
     * Update or set value for a given property
     * inside `process.env`.
     *
     * @example
     * ```ts
     * Env.set('PORT', 3333)
     * ```
     */
    set(key: string, value: string): void;
}
