"use strict";
/*
 * @adonisjs/sink
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const colors_1 = require("@poppinss/colors");
require("./src/disableLogger");
const pkg = __importStar(require("./package.json"));
/**
 * Returning an instance of colors based upon the env we are in. Since `colors` or
 * `fakeColors` doesn't have side-effects, we can re-use a single instance
 * accross the entire code base
 */
const kleur = process.env.NODE_ENV === 'testing' ? new colors_1.FakeColors() : new colors_1.Colors();
exports.kleur = kleur;
exports.colors = kleur;
/**
 * Returns a new instance of prompt. Also we lazy load the prompts
 */
function getPrompt() {
    const { Prompt, FakePrompt } = require('@poppinss/prompts');
    return process.env.NODE_ENV === 'testing' ? new FakePrompt() : new Prompt();
}
exports.getPrompt = getPrompt;
/**
 * Sharing the sink version, since sink is mainly passed as a reference by
 * the cli
 */
exports.sinkVersion = pkg.version;
var logger_1 = require("./src/logger");
exports.logger = logger_1.logger;
exports.files = __importStar(require("./src/Files"));
exports.tasks = __importStar(require("./src/Tasks"));
exports.utils = __importStar(require("./src/Utils"));
